/**
622. Design Circular Queue 
https://leetcode.com/problems/design-circular-queue/description/

Runtime: 23 ms (Beats 82%)
Memory : 17MB  (Beats 22%)
*/

class MyCircularQueue {
private:
    vector<int> v;
    int front = 0, len = 0;
    /* int rear = 0;*/
    
public:
    MyCircularQueue(int k): v(k) {}
    bool enQueue(int value) {
        if (isFull()) return false;
        /* rear = (front + len) % v.size();
         * v[rear] = value; 
         */
         
        v[(front + len) % v.size()] = value;
        len++;
        return true;
    }
    bool deQueue() {
        if (isEmpty()) return false;
        // since we are finding rear wrt to front & len, wedon'thave to reset it. 
        // It automatically will be set correctly. 
        front = (front + 1) % v.size();
        --len;
        return true;
    }
    int Front() {
        if (isEmpty()) return -1;
        return v[front];
    }
    int Rear() {
        if (isEmpty()) return -1;
        return v[(front + len - 1) % v.size()];
    }
    bool isEmpty() {
        return !len;
    }
    bool isFull() {
        return len == v.size();
    }
};


